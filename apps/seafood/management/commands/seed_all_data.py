"""
Management command ƒë·ªÉ seed to√†n b·ªô d·ªØ li·ªáu: categories, products, import batches, orders
"""
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from django.db import models
from apps.seafood.models import (
    SeafoodCategory, Seafood, ImportSource, ImportBatch,
    Order, OrderItem, InventoryLog
)
from decimal import Decimal
from django.utils import timezone
from datetime import timedelta
import random

User = get_user_model()


class Command(BaseCommand):
    help = 'Seed to√†n b·ªô d·ªØ li·ªáu cho h·ªá th·ªëng b√°n h·∫£i s·∫£n'

    def handle(self, *args, **options):
        self.stdout.write('üöÄ B·∫Øt ƒë·∫ßu seed to√†n b·ªô d·ªØ li·ªáu...\n')

        # Get users for assignment
        try:
            admin_user = User.objects.filter(email='admin@seafood.com').first()
            sale_user = User.objects.filter(email='sale1@seafood.com').first()
            warehouse_user = User.objects.filter(email='warehouse@seafood.com').first()

            if not admin_user:
                admin_user = User.objects.first()
            if not sale_user:
                sale_user = admin_user
            if not warehouse_user:
                warehouse_user = admin_user

        except Exception:
            admin_user = User.objects.first()
            sale_user = admin_user
            warehouse_user = admin_user

        # ============================================
        # 1. CREATE CATEGORIES
        # ============================================
        self.stdout.write('üìÇ T·∫°o danh m·ª•c...')

        categories_data = [
            {'name': 'T√¥m', 'slug': 'tom', 'description': 'C√°c lo·∫°i t√¥m t∆∞∆°i s·ªëng, ƒë√¥ng l·∫°nh', 'sort_order': 1},
            {'name': 'Cua', 'slug': 'cua', 'description': 'Cua bi·ªÉn, cua ho√†ng ƒë·∫ø', 'sort_order': 2},
            {'name': 'C√°', 'slug': 'ca', 'description': 'C√° bi·ªÉn t∆∞∆°i s·ªëng', 'sort_order': 3},
            {'name': 'M·ª±c', 'slug': 'muc', 'description': 'M·ª±c t∆∞∆°i, m·ª±c ·ªëng', 'sort_order': 4},
            {'name': '·ªêc', 'slug': 'oc', 'description': '·ªêc h∆∞∆°ng, ·ªëc len', 'sort_order': 5},
            {'name': 'Ngao S√≤', 'slug': 'ngao-so', 'description': 'Ngao, s√≤ ƒëi·ªáp, ngh√™u', 'sort_order': 6},
            {'name': 'H√†u', 'slug': 'hau', 'description': 'H√†u t∆∞∆°i s·ªëng', 'sort_order': 7},
            {'name': 'Gh·∫π', 'slug': 'ghe', 'description': 'Gh·∫π xanh, gh·∫π hoa', 'sort_order': 8},
        ]

        categories = {}
        for cat_data in categories_data:
            cat, created = SeafoodCategory.objects.get_or_create(
                slug=cat_data['slug'],
                defaults={
                    'name': cat_data['name'],
                    'description': cat_data['description'],
                    'sort_order': cat_data['sort_order']
                }
            )
            categories[cat.slug] = cat
            status = 'üÜï' if created else '‚úì'
            self.stdout.write(f'  {status} {cat.name}')

        self.stdout.write(self.style.SUCCESS(f'\n‚úÖ ƒê√£ t·∫°o {len(categories)} danh m·ª•c\n'))

        # ============================================
        # 2. CREATE IMPORT SOURCES
        # ============================================
        self.stdout.write('üìû T·∫°o ngu·ªìn nh·∫≠p h√†ng...')

        sources_data = [
            {
                'name': 'Ch·ª£ B√¨nh ƒêi·ªÅn',
                'source_type': 'market',
                'contact_info': {'phone': '0909123456', 'address': 'Qu·∫≠n 8, TP.HCM'}
            },
            {
                'name': 'Nguy·ªÖn VƒÉn A - Facebook',
                'source_type': 'facebook',
                'contact_info': {'facebook_url': 'facebook.com/nguyenvana', 'phone': '0901234567'}
            },
            {
                'name': 'Tr·∫ßn Th·ªã B - Zalo',
                'source_type': 'zalo',
                'contact_info': {'zalo_id': '0907654321', 'phone': '0907654321'}
            },
            {
                'name': 'C√¥ng ty H·∫£i S·∫£n Ph√∫ Qu·ªëc',
                'source_type': 'company',
                'contact_info': {'phone': '0297123456', 'email': 'info@haisan-phuquoc.com'}
            },
            {
                'name': 'Ch·ª£ H·∫£i S·∫£n V≈©ng T√†u',
                'source_type': 'market',
                'contact_info': {'phone': '0254123456', 'address': 'V≈©ng T√†u'}
            },
        ]

        sources = {}
        for src_data in sources_data:
            src, created = ImportSource.objects.get_or_create(
                name=src_data['name'],
                defaults={
                    'source_type': src_data['source_type'],
                    'contact_info': src_data['contact_info']
                }
            )
            sources[src.name] = src
            status = 'üÜï' if created else '‚úì'
            self.stdout.write(f'  {status} {src.name}')

        self.stdout.write(self.style.SUCCESS(f'\n‚úÖ ƒê√£ t·∫°o {len(sources)} ngu·ªìn nh·∫≠p h√†ng\n'))

        # ============================================
        # 3. CREATE SEAFOOD PRODUCTS
        # ============================================
        self.stdout.write('ü¶ê T·∫°o s·∫£n ph·∫©m h·∫£i s·∫£n...')

        products_data = [
            # T√îM
            {
                'code': 'TOM001',
                'name': 'T√¥m H√πm Alaska',
                'category': 'tom',
                'current_price': 1500000,
                'stock_quantity': 25.5,
                'description': 'T√¥m h√πm Alaska t∆∞∆°i s·ªëng, size l·ªõn',
                'origin': 'Alaska, M·ªπ',
                'status': 'active',
                'tags': ['cao c·∫•p', 't∆∞∆°i s·ªëng', 'nh·∫≠p kh·∫©u']
            },
            {
                'code': 'TOM002',
                'name': 'T√¥m S√∫',
                'category': 'tom',
                'current_price': 450000,
                'stock_quantity': 45.2,
                'description': 'T√¥m s√∫ t∆∞∆°i s·ªëng, size 3-4 con/kg',
                'origin': 'C√† Mau',
                'status': 'active',
                'tags': ['t∆∞∆°i s·ªëng', 'trong n∆∞·ªõc']
            },
            {
                'code': 'TOM003',
                'name': 'T√¥m C√†ng Xanh',
                'category': 'tom',
                'current_price': 380000,
                'stock_quantity': 32.8,
                'description': 'T√¥m c√†ng xanh t∆∞∆°i s·ªëng',
                'origin': 'ƒê·ªìng Nai',
                'status': 'active',
                'tags': ['t∆∞∆°i s·ªëng', 'nu√¥i']
            },

            # CUA
            {
                'code': 'CUA001',
                'name': 'Cua Ho√†ng ƒê·∫ø',
                'category': 'cua',
                'current_price': 2800000,
                'stock_quantity': 15.3,
                'description': 'Cua ho√†ng ƒë·∫ø Alaska, size kh·ªßng',
                'origin': 'Alaska, M·ªπ',
                'status': 'active',
                'tags': ['cao c·∫•p', 't∆∞∆°i s·ªëng', 'nh·∫≠p kh·∫©u']
            },
            {
                'code': 'CUA002',
                'name': 'Cua G·∫°ch',
                'category': 'cua',
                'current_price': 650000,
                'stock_quantity': 28.5,
                'description': 'Cua g·∫°ch bi·ªÉn, nhi·ªÅu g·∫°ch',
                'origin': 'C√† Mau',
                'status': 'active',
                'tags': ['t∆∞∆°i s·ªëng', 'trong n∆∞·ªõc']
            },

            # C√Å
            {
                'code': 'CA001',
                'name': 'C√° H·ªìi Na Uy',
                'category': 'ca',
                'current_price': 520000,
                'stock_quantity': 55.7,
                'description': 'C√° h·ªìi Na Uy t∆∞∆°i nguy√™n con',
                'origin': 'Na Uy',
                'status': 'active',
                'tags': ['cao c·∫•p', 't∆∞∆°i', 'nh·∫≠p kh·∫©u']
            },
            {
                'code': 'CA002',
                'name': 'C√° M√∫',
                'category': 'ca',
                'current_price': 380000,
                'stock_quantity': 42.3,
                'description': 'C√° m√∫ t∆∞∆°i s·ªëng',
                'origin': 'Ph√∫ Qu·ªëc',
                'status': 'active',
                'tags': ['t∆∞∆°i s·ªëng', 'trong n∆∞·ªõc']
            },
            {
                'code': 'CA003',
                'name': 'C√° Ch·∫Ωm',
                'category': 'ca',
                'current_price': 280000,
                'stock_quantity': 38.9,
                'description': 'C√° ch·∫Ωm bi·ªÉn t∆∞∆°i',
                'origin': 'V≈©ng T√†u',
                'status': 'active',
                'tags': ['t∆∞∆°i s·ªëng']
            },

            # M·ª∞C
            {
                'code': 'MUC001',
                'name': 'M·ª±c ·ªêng T∆∞∆°i',
                'category': 'muc',
                'current_price': 220000,
                'stock_quantity': 62.5,
                'description': 'M·ª±c ·ªëng t∆∞∆°i s·ªëng, size to',
                'origin': 'V≈©ng T√†u',
                'status': 'active',
                'tags': ['t∆∞∆°i s·ªëng']
            },
            {
                'code': 'MUC002',
                'name': 'M·ª±c Nang',
                'category': 'muc',
                'current_price': 180000,
                'stock_quantity': 48.2,
                'description': 'M·ª±c nang t∆∞∆°i',
                'origin': 'Phan Thi·∫øt',
                'status': 'active',
                'tags': ['t∆∞∆°i s·ªëng']
            },

            # ·ªêC
            {
                'code': 'OC001',
                'name': '·ªêc H∆∞∆°ng',
                'category': 'oc',
                'current_price': 350000,
                'stock_quantity': 75.8,
                'description': '·ªêc h∆∞∆°ng t∆∞∆°i s·ªëng, size ƒë·∫°i',
                'origin': 'Nha Trang',
                'status': 'active',
                'tags': ['t∆∞∆°i s·ªëng', 'cao c·∫•p']
            },
            {
                'code': 'OC002',
                'name': '·ªêc Len',
                'category': 'oc',
                'current_price': 120000,
                'stock_quantity': 95.3,
                'description': '·ªêc len t∆∞∆°i',
                'origin': 'C√† Mau',
                'status': 'active',
                'tags': ['t∆∞∆°i s·ªëng']
            },

            # NGAO S√í
            {
                'code': 'NGAO001',
                'name': 'S√≤ ƒêi·ªáp',
                'category': 'ngao-so',
                'current_price': 280000,
                'stock_quantity': 68.4,
                'description': 'S√≤ ƒëi·ªáp t∆∞∆°i s·ªëng',
                'origin': 'Nha Trang',
                'status': 'active',
                'tags': ['t∆∞∆°i s·ªëng', 'cao c·∫•p']
            },
            {
                'code': 'NGAO002',
                'name': 'Ngh√™u',
                'category': 'ngao-so',
                'current_price': 85000,
                'stock_quantity': 125.7,
                'description': 'Ngh√™u t∆∞∆°i',
                'origin': 'C√† Mau',
                'status': 'active',
                'tags': ['t∆∞∆°i s·ªëng']
            },

            # H√ÄU
            {
                'code': 'HAU001',
                'name': 'H√†u S·ªØa Ph√∫ Qu·ªëc',
                'category': 'hau',
                'current_price': 320000,
                'stock_quantity': 82.5,
                'description': 'H√†u s·ªØa t∆∞∆°i s·ªëng Ph√∫ Qu·ªëc',
                'origin': 'Ph√∫ Qu·ªëc',
                'status': 'active',
                'tags': ['t∆∞∆°i s·ªëng', 'cao c·∫•p']
            },

            # GH·∫∏
            {
                'code': 'GHE001',
                'name': 'Gh·∫π Xanh',
                'category': 'ghe',
                'current_price': 450000,
                'stock_quantity': 35.6,
                'description': 'Gh·∫π xanh t∆∞∆°i s·ªëng, c√≥ g·∫°ch',
                'origin': 'C√† Mau',
                'status': 'active',
                'tags': ['t∆∞∆°i s·ªëng']
            },
            {
                'code': 'GHE002',
                'name': 'Gh·∫π Hoa',
                'category': 'ghe',
                'current_price': 380000,
                'stock_quantity': 42.3,
                'description': 'Gh·∫π hoa t∆∞∆°i s·ªëng',
                'origin': 'V≈©ng T√†u',
                'status': 'active',
                'tags': ['t∆∞∆°i s·ªëng']
            },
        ]

        products = {}
        for prod_data in products_data:
            prod, created = Seafood.objects.get_or_create(
                code=prod_data['code'],
                defaults={
                    'name': prod_data['name'],
                    'category': categories[prod_data['category']],
                    'current_price': prod_data['current_price'],
                    'stock_quantity': prod_data['stock_quantity'],
                    'description': prod_data['description'],
                    'origin': prod_data['origin'],
                    'status': prod_data['status'],
                    'tags': prod_data['tags']
                }
            )
            products[prod.code] = prod
            status = 'üÜï' if created else '‚úì'
            self.stdout.write(f'  {status} {prod.code} - {prod.name} - {prod.stock_quantity}kg')

        self.stdout.write(self.style.SUCCESS(f'\n‚úÖ ƒê√£ t·∫°o {len(products)} s·∫£n ph·∫©m\n'))

        # ============================================
        # 4. CREATE IMPORT BATCHES
        # ============================================
        self.stdout.write('üì¶ T·∫°o l√¥ nh·∫≠p h√†ng...')

        import_batches = []
        batch_counter = 1

        # T·∫°o 2-3 l√¥ cho m·ªói s·∫£n ph·∫©m
        for prod_code, product in products.items():
            num_batches = random.randint(2, 3)

            for i in range(num_batches):
                days_ago = random.randint(1, 30)
                import_date = timezone.now().date() - timedelta(days=days_ago)

                # T√≠nh gi√° nh·∫≠p/b√°n
                import_price = int(product.current_price * Decimal('0.7'))  # 70% gi√° b√°n
                sell_price = product.current_price

                # T√≠nh s·ªë l∆∞·ª£ng
                total_weight = Decimal(str(random.uniform(10, 50))).quantize(Decimal('0.01'))
                remaining_weight = Decimal(str(random.uniform(5, total_weight))).quantize(Decimal('0.01'))

                batch = ImportBatch.objects.create(
                    seafood=product,
                    batch_code=f'BATCH{batch_counter:05d}',
                    import_source=random.choice(list(sources.values())),
                    import_date=import_date,
                    import_price=import_price,
                    sell_price=sell_price,
                    total_weight=total_weight,
                    remaining_weight=remaining_weight,
                    status='selling' if remaining_weight > 0 else 'sold_out',
                    imported_by=warehouse_user,
                    notes=f'L√¥ nh·∫≠p {import_date}'
                )

                import_batches.append(batch)
                batch_counter += 1

                self.stdout.write(f'  ‚úì {batch.batch_code} - {product.name} - {total_weight}kg')

        self.stdout.write(self.style.SUCCESS(f'\n‚úÖ ƒê√£ t·∫°o {len(import_batches)} l√¥ nh·∫≠p h√†ng\n'))

        # ============================================
        # 5. CREATE ORDERS
        # ============================================
        self.stdout.write('üìã T·∫°o ƒë∆°n h√†ng...')

        customers_data = [
            {'name': 'Nguy·ªÖn VƒÉn A', 'phone': '0901234567', 'address': '123 L√™ L·ª£i, Q1, TP.HCM'},
            {'name': 'Tr·∫ßn Th·ªã B', 'phone': '0902345678', 'address': '456 Nguy·ªÖn Hu·ªá, Q1, TP.HCM'},
            {'name': 'L√™ VƒÉn C', 'phone': '0903456789', 'address': '789 Tr·∫ßn H∆∞ng ƒê·∫°o, Q5, TP.HCM'},
            {'name': 'Ph·∫°m Th·ªã D', 'phone': '0904567890', 'address': '321 V√µ VƒÉn T·∫ßn, Q3, TP.HCM'},
            {'name': 'Ho√†ng VƒÉn E', 'phone': '0905678901', 'address': '654 C√°ch M·∫°ng Th√°ng 8, Q10, TP.HCM'},
            {'name': 'V≈© Th·ªã F', 'phone': '0906789012', 'address': '987 L√Ω Th∆∞·ªùng Ki·ªát, Q11, TP.HCM'},
            {'name': 'ƒê·∫∑ng VƒÉn G', 'phone': '0907890123', 'address': '147 Hai B√† Tr∆∞ng, Q3, TP.HCM'},
            {'name': 'B√πi Th·ªã H', 'phone': '0908901234', 'address': '258 ƒêi·ªán Bi√™n Ph·ªß, B√¨nh Th·∫°nh, TP.HCM'},
        ]

        order_counter = 1
        orders = []

        # T·∫°o 20 ƒë∆°n h√†ng
        for i in range(20):
            # Random customer
            customer = random.choice(customers_data)

            # Random date trong 30 ng√†y qua
            days_ago = random.randint(0, 30)
            order_date = timezone.now() - timedelta(days=days_ago)

            # Random payment method v√† status
            payment_method = random.choice(['cash', 'transfer', 'momo'])
            payment_status = random.choice(['paid', 'paid', 'paid', 'pending'])  # 75% paid
            status = random.choice(['completed', 'completed', 'completed', 'pending'])  # 75% completed

            # Create order
            order = Order.objects.create(
                order_code=f'ORD{order_counter:05d}',
                customer_name=customer['name'],
                customer_phone=customer['phone'],
                customer_address=customer['address'],
                subtotal=0,  # Will calculate later
                discount_amount=0,
                total_amount=0,  # Will calculate later
                payment_method=payment_method,
                payment_status=payment_status,
                paid_amount=0,  # Will calculate later
                status=status,
                notes=f'ƒê∆°n h√†ng t·∫°o {order_date.strftime("%d/%m/%Y")}',
                created_by=sale_user
            )
            order.created_at = order_date
            order.save()

            # Create 1-4 order items
            num_items = random.randint(1, 4)
            selected_products = random.sample(list(products.values()), num_items)

            subtotal = Decimal('0')

            for product in selected_products:
                # Random weight
                weight = Decimal(str(random.uniform(0.5, 5.0))).quantize(Decimal('0.01'))

                # Get a batch for this product
                batch = random.choice([b for b in import_batches if b.seafood == product])

                # Create order item
                item = OrderItem.objects.create(
                    order=order,
                    seafood=product,
                    import_batch=batch,
                    weight=weight,
                    unit_price=product.current_price,
                    notes=''
                )

                subtotal += item.subtotal

            # Update order totals
            discount = Decimal(str(random.choice([0, 0, 0, 10000, 20000, 50000])))  # 50% no discount
            order.subtotal = subtotal
            order.discount_amount = discount
            order.total_amount = subtotal - discount
            order.paid_amount = order.total_amount if payment_status == 'paid' else 0
            order.save()

            orders.append(order)
            order_counter += 1

            self.stdout.write(f'  ‚úì {order.order_code} - {order.customer_name} - {order.items.count()} items - {order.total_amount:,.0f}ƒë')

        self.stdout.write(self.style.SUCCESS(f'\n‚úÖ ƒê√£ t·∫°o {len(orders)} ƒë∆°n h√†ng\n'))

        # ============================================
        # 6. SUMMARY
        # ============================================
        self.stdout.write(self.style.SUCCESS('='*60))
        self.stdout.write(self.style.SUCCESS('üéâ HO√ÄN TH√ÄNH SEED D·ªÆ LI·ªÜU!'))
        self.stdout.write(self.style.SUCCESS('='*60))

        self.stdout.write('\nüìä TH·ªêNG K√ä:')
        self.stdout.write(f'  ‚Ä¢ Danh m·ª•c: {SeafoodCategory.objects.count()}')
        self.stdout.write(f'  ‚Ä¢ Ngu·ªìn nh·∫≠p h√†ng: {ImportSource.objects.count()}')
        self.stdout.write(f'  ‚Ä¢ S·∫£n ph·∫©m: {Seafood.objects.count()}')
        self.stdout.write(f'  ‚Ä¢ L√¥ nh·∫≠p h√†ng: {ImportBatch.objects.count()}')
        self.stdout.write(f'  ‚Ä¢ ƒê∆°n h√†ng: {Order.objects.count()}')
        self.stdout.write(f'  ‚Ä¢ Chi ti·∫øt ƒë∆°n h√†ng: {OrderItem.objects.count()}')

        # T√≠nh t·ªïng doanh thu
        total_revenue = Order.objects.filter(status='completed').aggregate(
            total=models.Sum('total_amount')
        )['total'] or 0

        self.stdout.write(f'\nüí∞ DOANH THU:')
        self.stdout.write(f'  ‚Ä¢ T·ªïng doanh thu (ƒë∆°n ho√†n th√†nh): {total_revenue:,.0f}ƒë')

        self.stdout.write('\nüì¶ KHO H√ÄNG:')
        total_stock_value = sum(
            p.stock_quantity * p.current_price
            for p in Seafood.objects.all()
        )
        self.stdout.write(f'  ‚Ä¢ T·ªïng gi√° tr·ªã t·ªìn kho: {total_stock_value:,.0f}ƒë')

        self.stdout.write(self.style.SUCCESS('\n‚úÖ D·ªØ li·ªáu ƒë√£ s·∫µn s√†ng ƒë·ªÉ s·ª≠ d·ª•ng!'))
