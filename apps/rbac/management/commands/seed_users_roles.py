"""
Management command ƒë·ªÉ seed users v·ªõi roles v√† permissions
"""
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from apps.rbac.models import Role, Permission, UserRole, RolePermission

User = get_user_model()


class Command(BaseCommand):
    help = 'Seed users v·ªõi roles v√† permissions ƒë·∫ßy ƒë·ªß'

    def handle(self, *args, **options):
        self.stdout.write('üöÄ B·∫Øt ƒë·∫ßu seed users, roles, v√† permissions...\n')

        # ============================================
        # 1. CREATE PERMISSIONS
        # ============================================
        self.stdout.write('üìã T·∫°o permissions...')

        permissions_data = [
            # DASHBOARD
            {'module': 'dashboard', 'name': 'Xem Dashboard', 'codename': 'view_dashboard', 'action': 'read'},
            {'module': 'dashboard', 'name': 'Xem Dashboard H·∫£i s·∫£n', 'codename': 'view_seafood_dashboard', 'action': 'read'},

            # SEAFOOD/PRODUCTS
            {'module': 'seafood', 'name': 'Xem s·∫£n ph·∫©m', 'codename': 'view_products', 'action': 'list'},
            {'module': 'seafood', 'name': 'T·∫°o s·∫£n ph·∫©m', 'codename': 'create_product', 'action': 'create'},
            {'module': 'seafood', 'name': 'S·ª≠a s·∫£n ph·∫©m', 'codename': 'update_product', 'action': 'update'},
            {'module': 'seafood', 'name': 'X√≥a s·∫£n ph·∫©m', 'codename': 'delete_product', 'action': 'delete'},

            # ORDERS
            {'module': 'orders', 'name': 'Xem ƒë∆°n h√†ng', 'codename': 'view_orders', 'action': 'list'},
            {'module': 'orders', 'name': 'T·∫°o ƒë∆°n h√†ng', 'codename': 'create_order', 'action': 'create'},
            {'module': 'orders', 'name': 'S·ª≠a ƒë∆°n h√†ng', 'codename': 'update_order', 'action': 'update'},
            {'module': 'orders', 'name': 'X√≥a ƒë∆°n h√†ng', 'codename': 'delete_order', 'action': 'delete'},
            {'module': 'orders', 'name': 'Xu·∫•t PDF ƒë∆°n h√†ng', 'codename': 'export_order_pdf', 'action': 'export'},
            {'module': 'orders', 'name': 'C√¢n h√†ng v√† upload ·∫£nh', 'codename': 'weigh_order', 'action': 'update'},
            {'module': 'orders', 'name': 'ƒê√°nh d·∫•u ƒë√£ g·ª≠i v·∫≠n chuy·ªÉn', 'codename': 'ship_order', 'action': 'update'},
            {'module': 'orders', 'name': 'Thay ƒë·ªïi gi√° v√† tr·ªçng l∆∞·ª£ng', 'codename': 'adjust_order_items', 'action': 'update'},

            # POS
            {'module': 'pos', 'name': 'S·ª≠ d·ª•ng POS', 'codename': 'use_pos', 'action': 'use'},
            {'module': 'pos', 'name': 'T·∫°o ƒë∆°n POS', 'codename': 'create_pos_order', 'action': 'create'},
            {'module': 'pos', 'name': 'H·ªßy ƒë∆°n POS', 'codename': 'cancel_pos_order', 'action': 'delete'},

            # CATEGORIES
            {'module': 'categories', 'name': 'Xem danh m·ª•c', 'codename': 'view_categories', 'action': 'list'},
            {'module': 'categories', 'name': 'T·∫°o danh m·ª•c', 'codename': 'create_category', 'action': 'create'},
            {'module': 'categories', 'name': 'S·ª≠a danh m·ª•c', 'codename': 'update_category', 'action': 'update'},
            {'module': 'categories', 'name': 'X√≥a danh m·ª•c', 'codename': 'delete_category', 'action': 'delete'},

            # INVENTORY
            {'module': 'inventory', 'name': 'Xem t·ªìn kho', 'codename': 'view_inventory', 'action': 'list'},
            {'module': 'inventory', 'name': 'Nh·∫≠p kho', 'codename': 'import_inventory', 'action': 'create'},
            {'module': 'inventory', 'name': 'Xu·∫•t kho', 'codename': 'export_inventory', 'action': 'create'},
            {'module': 'inventory', 'name': 'Ki·ªÉm kho', 'codename': 'check_inventory', 'action': 'update'},

            # USERS
            {'module': 'users', 'name': 'Xem ng∆∞·ªùi d√πng', 'codename': 'view_users', 'action': 'list'},
            {'module': 'users', 'name': 'T·∫°o ng∆∞·ªùi d√πng', 'codename': 'create_user', 'action': 'create'},
            {'module': 'users', 'name': 'S·ª≠a ng∆∞·ªùi d√πng', 'codename': 'update_user', 'action': 'update'},
            {'module': 'users', 'name': 'X√≥a ng∆∞·ªùi d√πng', 'codename': 'delete_user', 'action': 'delete'},
            {'module': 'users', 'name': 'G√°n vai tr√≤', 'codename': 'assign_role', 'action': 'update'},

            # ROLES
            {'module': 'roles', 'name': 'Xem vai tr√≤', 'codename': 'view_roles', 'action': 'list'},
            {'module': 'roles', 'name': 'T·∫°o vai tr√≤', 'codename': 'create_role', 'action': 'create'},
            {'module': 'roles', 'name': 'S·ª≠a vai tr√≤', 'codename': 'update_role', 'action': 'update'},
            {'module': 'roles', 'name': 'X√≥a vai tr√≤', 'codename': 'delete_role', 'action': 'delete'},

            # PERMISSIONS
            {'module': 'permissions', 'name': 'Xem quy·ªÅn h·∫°n', 'codename': 'view_permissions', 'action': 'list'},
            {'module': 'permissions', 'name': 'G√°n quy·ªÅn cho vai tr√≤', 'codename': 'assign_permission', 'action': 'update'},

            # DEPARTMENTS
            {'module': 'departments', 'name': 'Xem ph√≤ng ban', 'codename': 'view_departments', 'action': 'list'},
            {'module': 'departments', 'name': 'T·∫°o ph√≤ng ban', 'codename': 'create_department', 'action': 'create'},
            {'module': 'departments', 'name': 'S·ª≠a ph√≤ng ban', 'codename': 'update_department', 'action': 'update'},
            {'module': 'departments', 'name': 'X√≥a ph√≤ng ban', 'codename': 'delete_department', 'action': 'delete'},

            # REPORTS
            {'module': 'reports', 'name': 'Xem b√°o c√°o', 'codename': 'view_reports', 'action': 'read'},
            {'module': 'reports', 'name': 'Xu·∫•t b√°o c√°o', 'codename': 'export_reports', 'action': 'export'},

            # SETTINGS
            {'module': 'settings', 'name': 'Xem c√†i ƒë·∫∑t', 'codename': 'view_settings', 'action': 'read'},
            {'module': 'settings', 'name': 'S·ª≠a c√†i ƒë·∫∑t', 'codename': 'update_settings', 'action': 'update'},
        ]

        permissions = {}
        for perm_data in permissions_data:
            perm, created = Permission.objects.get_or_create(
                codename=perm_data['codename'],
                defaults={
                    'module': perm_data['module'],
                    'name': perm_data['name'],
                    'action': perm_data['action'],
                    'description': f"{perm_data['name']} - {perm_data['module']}"
                }
            )
            permissions[perm.codename] = perm
            if created:
                self.stdout.write(f'  ‚úì {perm.name}')

        self.stdout.write(self.style.SUCCESS(f'\n‚úÖ ƒê√£ t·∫°o {len(permissions)} permissions\n'))

        # ============================================
        # 2. CREATE ROLES
        # ============================================
        self.stdout.write('üë• T·∫°o roles...')

        roles_config = [
            {
                'slug': 'super-admin',
                'name': 'Super Admin',
                'level': 100,
                'color': '#ef4444',
                'permissions': 'all'
            },
            {
                'slug': 'manager',
                'name': 'Qu·∫£n l√Ω',
                'level': 70,
                'color': '#8b5cf6',
                'permissions': [
                    'view_dashboard', 'view_seafood_dashboard',
                    'view_products', 'create_product', 'update_product',
                    'view_orders', 'create_order', 'update_order', 'export_order_pdf',
                    'use_pos', 'create_pos_order',
                    'view_categories', 'create_category', 'update_category',
                    'view_inventory', 'import_inventory', 'export_inventory', 'check_inventory',
                    'view_users', 'view_roles', 'view_permissions', 'view_departments',
                    'view_reports', 'export_reports',
                    'view_settings'
                ]
            },
            {
                'slug': 'salesperson',
                'name': 'Nh√¢n vi√™n b√°n h√†ng',
                'level': 50,
                'color': '#10b981',
                'permissions': [
                    'view_dashboard',
                    'view_products',
                    'view_orders', 'update_order', 'export_order_pdf',
                    # Workflow permissions - ch·ªâ x·ª≠ l√Ω ƒë∆°n h√†ng ƒë√£ t·∫°o
                    'weigh_order',           # C√¢n h√†ng v√† upload ·∫£nh
                    'ship_order',            # ƒê√°nh d·∫•u ƒë√£ g·ª≠i v·∫≠n chuy·ªÉn
                    'adjust_order_items',    # Thay ƒë·ªïi gi√° v√† tr·ªçng l∆∞·ª£ng
                    'view_categories',
                    'view_inventory'
                ]
            },
            {
                'slug': 'warehouse',
                'name': 'Th·ªß kho',
                'level': 50,
                'color': '#f59e0b',
                'permissions': [
                    'view_dashboard',
                    'view_products', 'update_product',
                    'view_orders',
                    'view_categories',
                    'view_inventory', 'import_inventory', 'export_inventory', 'check_inventory'
                ]
            },
            {
                'slug': 'accountant',
                'name': 'K·∫ø to√°n',
                'level': 60,
                'color': '#06b6d4',
                'permissions': [
                    'view_dashboard',
                    'view_products',
                    'view_orders', 'export_order_pdf',
                    'view_categories',
                    'view_inventory',
                    'view_reports', 'export_reports'
                ]
            },
            {
                'slug': 'viewer',
                'name': 'Ng∆∞·ªùi xem',
                'level': 10,
                'color': '#64748b',
                'permissions': [
                    'view_dashboard',
                    'view_products',
                    'view_orders',
                    'view_categories'
                ]
            }
        ]

        roles = {}
        for role_config in roles_config:
            role, created = Role.objects.get_or_create(
                slug=role_config['slug'],
                defaults={
                    'name': role_config['name'],
                    'level': role_config['level'],
                    'color': role_config['color'],
                    'description': f'Vai tr√≤ {role_config["name"]}'
                }
            )
            roles[role.slug] = role

            # Assign permissions
            if role_config['permissions'] == 'all':
                # Super Admin gets all permissions
                for perm in permissions.values():
                    RolePermission.objects.get_or_create(role=role, permission=perm)
                self.stdout.write(f'  ‚úì {role.name} - ALL permissions')
            else:
                # Other roles get specific permissions
                for perm_code in role_config['permissions']:
                    if perm_code in permissions:
                        RolePermission.objects.get_or_create(
                            role=role,
                            permission=permissions[perm_code]
                        )
                self.stdout.write(f'  ‚úì {role.name} - {len(role_config["permissions"])} permissions')

        self.stdout.write(self.style.SUCCESS(f'\n‚úÖ ƒê√£ t·∫°o {len(roles)} roles\n'))

        # ============================================
        # 3. CREATE USERS
        # ============================================
        self.stdout.write('üë§ T·∫°o users...')

        users_data = [
            {
                'email': 'admin@seafood.com',
                'password': 'admin123',
                'first_name': 'Admin',
                'last_name': 'System',
                'user_type': 'manager',
                'role': 'super-admin'
            },
            {
                'email': 'manager@seafood.com',
                'password': 'manager123',
                'first_name': 'Nguy·ªÖn',
                'last_name': 'Qu·∫£n L√Ω',
                'user_type': 'manager',
                'role': 'manager'
            },
            {
                'email': 'sale1@seafood.com',
                'password': 'sale123',
                'first_name': 'Tr·∫ßn',
                'last_name': 'B√°n H√†ng',
                'user_type': 'employee',
                'role': 'salesperson'
            },
            {
                'email': 'sale2@seafood.com',
                'password': 'sale123',
                'first_name': 'L√™',
                'last_name': 'Nh√¢n Vi√™n',
                'user_type': 'employee',
                'role': 'salesperson'
            },
            {
                'email': 'warehouse@seafood.com',
                'password': 'warehouse123',
                'first_name': 'Ph·∫°m',
                'last_name': 'Th·ªß Kho',
                'user_type': 'employee',
                'role': 'warehouse'
            },
            {
                'email': 'accountant@seafood.com',
                'password': 'accountant123',
                'first_name': 'Ho√†ng',
                'last_name': 'K·∫ø To√°n',
                'user_type': 'employee',
                'role': 'accountant'
            }
        ]

        created_users = []
        for user_data in users_data:
            user, created = User.objects.get_or_create(
                email=user_data['email'],
                defaults={
                    'first_name': user_data['first_name'],
                    'last_name': user_data['last_name'],
                    'user_type': user_data['user_type'],
                    'is_active': True
                }
            )

            if created:
                user.set_password(user_data['password'])
                user.save()

            # Assign role
            role = roles[user_data['role']]
            UserRole.objects.get_or_create(user=user, role=role)

            created_users.append({
                'email': user.email,
                'password': user_data['password'],
                'name': f'{user.first_name} {user.last_name}',
                'role': role.name
            })

            status = 'üÜï' if created else '‚úì'
            self.stdout.write(f'  {status} {user.email} ‚Üí {role.name}')

        self.stdout.write(self.style.SUCCESS(f'\n‚úÖ ƒê√£ t·∫°o {len(created_users)} users\n'))

        # ============================================
        # 4. SUMMARY
        # ============================================
        self.stdout.write(self.style.SUCCESS('='*60))
        self.stdout.write(self.style.SUCCESS('üéâ HO√ÄN TH√ÄNH SEED D·ªÆ LI·ªÜU!'))
        self.stdout.write(self.style.SUCCESS('='*60))

        self.stdout.write('\nüìä TH·ªêNG K√ä:')
        self.stdout.write(f'  ‚Ä¢ Permissions: {len(permissions)}')
        self.stdout.write(f'  ‚Ä¢ Roles: {len(roles)}')
        self.stdout.write(f'  ‚Ä¢ Users: {len(created_users)}')

        self.stdout.write('\nüë• DANH S√ÅCH T√ÄI KHO·∫¢N:\n')
        for user in created_users:
            self.stdout.write(f'  üìß {user["email"]}')
            self.stdout.write(f'     üîë Password: {user["password"]}')
            self.stdout.write(f'     üë§ Name: {user["name"]}')
            self.stdout.write(f'     üé≠ Role: {user["role"]}\n')

        self.stdout.write(self.style.SUCCESS('‚úÖ B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v·ªõi c√°c t√†i kho·∫£n tr√™n!'))
